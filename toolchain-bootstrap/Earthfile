VERSION 0.8

image-debian-jessie:
  ARG IMAGE_SHA256=32ad5050caffb2c7e969dac873bce2c370015c2256ff984b70c1c08b3a2816a0
  # This is the last published snapshot of Jessie.
  ARG DEBIAN_SNAPSHOT=20230322T152120Z
  FROM debian@sha256:${IMAGE_SHA256}
  RUN groupadd -g 1000 build && \
    useradd -u 1000 -g 1000 -d /build -s /bin/bash -m build && \
    chown -R build:build /build /etc/ld.so.conf.d /usr/local
  ENV HOME=/build \
    SHELL=/bin/bash \
    USER=build \
    LOGNAME=build \
    HOSTNAME=builder \
    DEBIAN_FRONTEND=noninteractive
  CMD ["/bin/bash", "--login"]
  WORKDIR '/build'
  RUN for s in debian_jessie debian_jessie-updates debian-security_jessie/updates; do \
    echo "deb http://snapshot.debian.org/archive/${s%_*}/${DEBIAN_SNAPSHOT}/ ${s#*_} main"; \
    done > /etc/apt/sources.list && \
    ( echo 'quiet "true";'; \
      echo 'APT::Get::Assume-Yes "true";'; \
      echo 'APT::Install-Recommends "false";'; \
      echo 'Acquire::Check-Valid-Until "false";'; \
      echo 'Acquire::Retries "5";'; \
    ) > /etc/apt/apt.conf.d/99portable-clang
  RUN dpkg --add-architecture i386
  RUN apt-get update
  RUN apt-get install ca-certificates
  ARG install_packages
  IF [ -n "${install_packages}" ]
    RUN apt-get install --force-yes ${install_packages}
  END
  COPY scripts/secure-download.sh /usr/local/bin/
  USER build:build

image-debian-bullseye:
  ARG IMAGE_SHA256=d52921d97310d0bd48dab928548ef539d5c88c743165754c57cfad003031386c
  ARG DEBIAN_SNAPSHOT=20240107T024933Z
  FROM debian@sha256:${IMAGE_SHA256}
  RUN groupadd -g 1000 build && \
    useradd -u 1000 -g 1000 -d /build -s /bin/bash -m build && \
    chown -R build:build /build /etc/ld.so.conf.d /usr/local
  ENV HOME=/build \
    SHELL=/bin/bash \
    USER=build \
    LOGNAME=build \
    HOSTNAME=builder \
    DEBIAN_FRONTEND=noninteractive
  CMD ["/bin/bash", "--login"]
  WORKDIR '/build'
  RUN for s in debian_bullseye debian_bullseye-updates debian-security_bullseye-security; do \
    echo "deb http://snapshot.debian.org/archive/${s%_*}/${DEBIAN_SNAPSHOT}/ ${s#*_} main"; \
    done > /etc/apt/sources.list && \
    ( echo 'quiet "true";'; \
      echo 'APT::Get::Assume-Yes "true";'; \
      echo 'APT::Install-Recommends "false";'; \
      echo 'Acquire::Check-Valid-Until "false";'; \
      echo 'Acquire::Retries "5";'; \
    ) > /etc/apt/apt.conf.d/99portable-clang
  RUN dpkg --add-architecture i386
  RUN apt-get update
  RUN apt-get install ca-certificates
  ARG install_packages
  IF [ -n "${install_packages}" ]
    RUN apt-get install ${install_packages}
  END
  COPY scripts/secure-download.sh /usr/local/bin/
  USER build:build

image-download:
  FROM +image-debian-bullseye --install_packages="coreutils curl git"

image-gnu-build:
  FROM +image-debian-jessie --install_packages="autoconf automake bison build-essential gawk libtool gcc gcc-multilib make texinfo xz-utils unzip"

image-package:
  FROM +image-debian-bullseye --install_packages="tar zstd"

deb-download:
  ARG --required package
  FROM +image-debian-jessie
  RUN apt-get download $package
  SAVE ARTIFACT $package*.deb deb

sccache-x86-64-linux:
  FROM +image-download
  RUN secure-download.sh \
    https://github.com/mozilla/sccache/releases/download/v0.10.0/sccache-v0.10.0-x86_64-unknown-linux-musl.tar.gz \
    1fbb35e135660d04a2d5e42b59c7874d39b3deb17de56330b25b713ec59f849b \
    sccache.tar.gz
  RUN tar --strip-components=1 -xvf sccache.tar.gz
  RUN chmod +x sccache
  SAVE ARTIFACT sccache

# binutils 2.42 has issues compiling on legacy GCC.
download-binutils:
  FROM +image-download
  RUN secure-download.sh \
    https://ftp.gnu.org/gnu/binutils/binutils-2.41.tar.xz \
    ae9a5789e23459e59606e6714723f2d3ffc31c03174191ef0d015bdf06007450 \
    binutils.tar.xz
  SAVE ARTIFACT binutils.tar.xz

download-cmake-linux-x86-64:
  FROM +image-download
  RUN secure-download.sh \
    https://github.com/Kitware/CMake/releases/download/v3.28.3/cmake-3.28.3-linux-x86_64.tar.gz \
    804d231460ab3c8b556a42d2660af4ac7a0e21c98a7f8ee3318a74b4a9a187a6 \
    cmake.tar.gz
  SAVE ARTIFACT cmake.tar.gz

download-cpython:
  FROM +image-download
  RUN secure-download.sh \
    https://www.python.org/ftp/python/3.11.7/Python-3.11.7.tar.xz \
    18e1aa7e66ff3a58423d59ed22815a6954e53342122c45df20c96877c062b9b7 \
    cpython.tar.xz
  SAVE ARTIFACT cpython.tar.xz

download-gcc-10:
  FROM +image-download
  RUN secure-download.sh \
    https://ftp.gnu.org/gnu/gcc/gcc-10.3.0/gcc-10.3.0.tar.xz \
    64f404c1a650f27fc33da242e1f2df54952e3963a49e06e73f6940f3223ac344 \
    gcc-10.tar.xz
  SAVE ARTIFACT gcc-10.tar.xz

download-gcc-15:
  FROM +image-download
  RUN secure-download.sh \
    https://ftp.gnu.org/gnu/gcc/gcc-15.1.0/gcc-15.1.0.tar.xz \
    e2b09ec21660f01fecffb715e0120265216943f038d0e48a9868713e54f06cea \
    gcc-15.tar.xz
  SAVE ARTIFACT gcc-15.tar.xz

download-gmp-6.1:
  FROM +image-download
  RUN secure-download.sh \
    https://ftp.gnu.org/gnu/gmp/gmp-6.1.2.tar.xz \
    87b565e89a9a684fe4ebeeddb8399dce2599f9c9049854ca8c0dfbdea0e21912 \
    gmp-6.1.tar.xz
  SAVE ARTIFACT gmp-6.1.tar.xz

download-gmp-6.2:
  FROM +image-download
  RUN secure-download.sh \
    https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.xz \
    fd4829912cddd12f84181c3451cc752be224643e87fac497b69edddadc49b4f2 \
    gmp-6.2.tar.xz
  SAVE ARTIFACT gmp-6.2.tar.xz

download-isl-0.18:
  FROM +image-download
  RUN secure-download.sh \
    https://gcc.gnu.org/pub/gcc/infrastructure/isl-0.18.tar.bz2 \
    6b8b0fd7f81d0a957beb3679c81bbb34ccc7568d5682844d8924424a0dadcb1b \
    isl-0.18.tar.bz2
  SAVE ARTIFACT isl-0.18.tar.bz2

download-isl-0.24:
  FROM +image-download
  RUN secure-download.sh \
    https://gcc.gnu.org/pub/gcc/infrastructure/isl-0.24.tar.bz2 \
    fcf78dd9656c10eb8cf9fbd5f59a0b6b01386205fe1934b3b287a0a1898145c0 \
    isl-0.24.tar.bz2
  SAVE ARTIFACT isl-0.24.tar.bz2

download-llvm:
  FROM +image-download
  RUN secure-download.sh \
    https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.0/llvm-project-20.1.0.src.tar.xz \
    4579051e3c255fb4bb795d54324f5a7f3ef79bd9181e44293d7ee9a7f62aad9a \
    llvm.tar.xz
  SAVE ARTIFACT llvm.tar.xz

download-mpc-1.0:
  FROM +image-download
  RUN secure-download.sh \
    https://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz \
    617decc6ea09889fb08ede330917a00b16809b8db88c29c31bfbb49cbf88ecc3 \
    mpc-1.0.tar.gz
  SAVE ARTIFACT mpc-1.0.tar.gz

download-mpc-1.2:
  FROM +image-download
  RUN secure-download.sh \
    https://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.2.1.tar.gz \
    17503d2c395dfcf106b622dc142683c1199431d095367c6aacba6eec30340459 \
    mpc-1.2.tar.gz
  SAVE ARTIFACT mpc-1.2.tar.gz

download-mpfr-3.1:
  FROM +image-download
  RUN secure-download.sh \
    https://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.6.tar.bz2 \
    cf4f4b2d80abb79e820e78c8077b6725bbbb4e8f41896783c899087be0e94068 \
    mpfr-3.1.tar.bz2
  SAVE ARTIFACT mpfr-3.1.tar.bz2

download-mpfr-4.1:
  FROM +image-download
  RUN secure-download.sh \
    https://gcc.gnu.org/pub/gcc/infrastructure/mpfr-4.1.0.tar.bz2 \
    feced2d430dd5a97805fa289fed3fc8ff2b094c02d05287fd6133e7f1f0ec926 \
    mpfr-4.1.tar.bz2
  SAVE ARTIFACT mpfr-4.1.tar.bz2

download-ninja-linux-x86-64:
  FROM +image-download
  RUN secure-download.sh \
    https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip \
    763464859c7ef2ea3a0a10f4df40d2025d3bb9438fcb1228404640410c0ec22d \
    ninja.zip
  SAVE ARTIFACT ninja.zip

download-openssl-1.1:
  FROM +image-download
  RUN secure-download.sh \
    https://www.openssl.org/source/openssl-1.1.1v.tar.gz \
    d6697e2871e77238460402e9362d47d18382b15ef9f246aba6c7bd780d38a6b0 \
    openssl.tar.gz
  SAVE ARTIFACT openssl.tar.gz

download-zstd:
  FROM +image-download
  RUN secure-download.sh \
    https://github.com/facebook/zstd/releases/download/v1.5.7/zstd-1.5.7.tar.gz \
    eb33e51f49a15e023950cd7825ca74a4a2b43db8354825ac24fc1b7ee09e6fa3 \
    zstd.tar.gz
  SAVE ARTIFACT zstd.tar.gz

clone-llvm:
  FROM +image-download
  RUN git clone --no-checkout --shallow-since=2022-01-01 https://github.com/llvm/llvm-project.git
  SAVE ARTIFACT llvm-project

binutils-initial-x86-64-linux:
  FROM +image-gnu-build
  COPY +sccache-x86-64-linux/sccache /usr/local/bin/
  COPY +download-binutils/binutils.tar.xz /build/
  COPY scripts/binutils-build.sh /build/binutils-build.sh
  RUN --secret SCCACHE_REGION --secret SCCACHE_BUCKET --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY \
    BUILD_CC=/usr/bin/gcc \
    BUILD_CXX=/usr/bin/g++ \
    /build/binutils-build.sh
  SAVE ARTIFACT /build/out/toolchain install

gcc-10-x86-64-linux:
  ARG PARALLEL=16
  FROM +image-gnu-build
  COPY +sccache-x86-64-linux/sccache /usr/local/bin/sccache
  COPY scripts/sccache-wrapper.sh /usr/local/bin/sccache-wrapper.sh
  COPY +binutils-initial-x86-64-linux/install /toolchain/
  COPY +download-gcc-10/gcc-10.tar.xz /build/
  COPY +download-gmp-6.1/gmp-6.1.tar.xz /build/
  COPY +download-isl-0.18/isl-0.18.tar.bz2 /build/
  COPY +download-mpc-1.0/mpc-1.0.tar.gz /build/
  COPY +download-mpfr-3.1/mpfr-3.1.tar.bz2 /build/
  COPY scripts/gcc-build-x86-64-linux.sh /build/gcc-build.sh
  RUN --secret SCCACHE_REGION --secret SCCACHE_BUCKET --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY \
    GCC_VERSION=10 GMP_VERSION=6.1 ISL_VERSION=0.18 MPC_VERSION=1.0 MPFR_VERSION=3.1 \
    BUILD_CC=/usr/bin/gcc BUILD_CXX=/usr/bin/g++ \
    EXTRA_CONFIGURE_ARGS=--disable-bootstrap \
    PARALLEL=${PARALLEL} \
    /build/gcc-build.sh
  SAVE ARTIFACT /build/out-install/toolchain install
  SAVE ARTIFACT /build/out-support support

# We need to build binutils with a modern GCC to avoid a relocation error with
# old binutils from base image.
binutils-x86-64-linux:
  FROM +image-gnu-build
  COPY +sccache-x86-64-linux/sccache /usr/local/bin/sccache
  COPY +download-binutils/binutils.tar.xz /build/
  COPY +binutils-initial-x86-64-linux/install /toolchain
  COPY +gcc-10-x86-64-linux/install /toolchain
  COPY scripts/binutils-build.sh /build/binutils-build.sh
  RUN --secret SCCACHE_REGION --secret SCCACHE_BUCKET --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY \
    BUILD_CC=/toolchain/bin/gcc \
    BUILD_CXX=/toolchain/bin/g++ \
    EXTRA_CONFIGURE_ARGS=--enable-bootstrap \
    /build/binutils-build.sh
  SAVE ARTIFACT /build/out/toolchain install

gcc-15-x86-64-linux:
  ARG PARALLEL=16
  FROM +image-gnu-build
  COPY +sccache-x86-64-linux/sccache /usr/local/bin/sccache
  COPY scripts/sccache-wrapper.sh /usr/local/bin/sccache-wrapper.sh
  COPY +download-gcc-15/gcc-15.tar.xz /build/
  COPY +download-gmp-6.2/gmp-6.2.tar.xz /build/
  COPY +download-isl-0.24/isl-0.24.tar.bz2 /build/
  COPY +download-mpc-1.2/mpc-1.2.tar.gz /build/
  COPY +download-mpfr-4.1/mpfr-4.1.tar.bz2 /build/
  COPY +binutils-x86-64-linux/install /toolchain
  COPY +gcc-10-x86-64-linux/install /toolchain
  COPY scripts/gcc-build-x86-64-linux.sh /build/gcc-build.sh
  RUN --secret SCCACHE_REGION --secret SCCACHE_BUCKET --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY \
    GCC_VERSION=15 GMP_VERSION=6.2 ISL_VERSION=0.24 MPC_VERSION=1.2 MPFR_VERSION=4.1 \
    BUILD_CC=/toolchain/bin/gcc BUILD_CXX=/toolchain/bin/g++ \
    PARALLEL=${PARALLEL} \
    /build/gcc-build.sh
  SAVE ARTIFACT /build/out-install/toolchain install
  SAVE ARTIFACT /build/out-support support

openssl-1.1-x86-64-linux:
  ARG PARALLEL=16
  FROM +image-debian-jessie --install_packages="build-essential"
  COPY +download-openssl-1.1/openssl.tar.gz /build/
  COPY scripts/openssl-build.sh /build/
  RUN PARALLEL=${PARALLEL} /build/openssl-build.sh
  SAVE ARTIFACT /build/out/toolchain install

zstd-x86-64-linux:
  ARG PARALLEL=16
  FROM +image-debian-jessie --install_packages="build-essential"
  COPY +download-zstd/zstd.tar.gz /build/
  COPY scripts/zstd-build.sh /build/
  RUN PARALLEL=${PARALLEL} /build/zstd-build.sh
  SAVE ARTIFACT /build/out/toolchain install

cpython-x86-64-linux:
  ARG PARALLEL=16
  FROM +image-debian-jessie --install_packages="autoconf automake build-essential libffi-dev make tar xz-utils zlib1g-dev"
  COPY +sccache-x86-64-linux/sccache /usr/local/bin/sccache
  COPY +openssl-1.1-x86-64-linux/install /toolchain
  COPY +download-cpython/cpython.tar.xz /build/
  COPY scripts/cpython-build.sh /build/
  RUN --secret SCCACHE_REGION --secret SCCACHE_BUCKET --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY \
    PARALLEL=${PARALLEL} \
    /build/cpython-build.sh
  SAVE ARTIFACT /build/out/toolchain install

# A bootstrapped Clang targeting the current architecture.
clang-bootstrap-x86-64-linux:
  ARG PARALLEL_NINJA=64
  ARG NINJA_MAX_LOAD=32
  FROM +image-debian-jessie --install_packages="libc6-dev libc6-dev:i386 patch tar xz-utils unzip zlib1g-dev"
  COPY +sccache-x86-64-linux/sccache /usr/local/bin/sccache
  COPY +download-llvm/llvm.tar.xz /build/
  COPY +download-cmake-linux-x86-64/cmake.tar.gz /build/
  COPY +download-ninja-linux-x86-64/ninja.zip /build/
  COPY +binutils-x86-64-linux/install /toolchain/
  COPY +gcc-15-x86-64-linux/install /toolchain/
  COPY +cpython-x86-64-linux/install /toolchain/
  COPY scripts/clang-bootstrap.sh /build/
  RUN --secret SCCACHE_REGION --secret SCCACHE_BUCKET --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY \
    PARALLEL_NINJA=${PARALLEL_NINJA} NINJA_MAX_LOAD=${NINJA_MAX_LOAD} \
    /build/clang-bootstrap.sh
  SAVE ARTIFACT /build/out/toolchain install

llvm-gnu-x86-64-linux-build:
  ARG PARALLEL_NINJA=64
  ARG NINJA_MAX_LOAD=32
  # We need compiler-rt to find the libc statically linked object files (like crt1.o)
  # for i386. Getting this to work reliably is finicky. Using a multiarch system
  # with the multiarch install of i386 makes this "just work."
  FROM +image-debian-jessie --install_packages="libc6-dev libc6-dev:i386 patch tar xz-utils unzip zlib1g-dev"
  COPY +sccache-x86-64-linux/sccache /usr/local/bin/sccache
  COPY +download-llvm/llvm.tar.xz /build/
  COPY +download-cmake-linux-x86-64/cmake.tar.gz /build/
  COPY +download-ninja-linux-x86-64/ninja.zip /build/
  COPY +binutils-x86-64-linux/install /toolchain/
  COPY +gcc-15-x86-64-linux/support /toolchain/
  FOR toolchain IN cpython-x86-64-linux clang-bootstrap-x86-64-linux zstd-x86-64-linux
    COPY +$toolchain/install /toolchain/
  END
  COPY patches/*.patch /build/
  COPY scripts/clang-gnu-stage2.sh /build/
  RUN --secret SCCACHE_REGION --secret SCCACHE_BUCKET --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY \
    PARALLEL_NINJA=${PARALLEL_NINJA} NINJA_MAX_LOAD=${NINJA_MAX_LOAD} \
    /build/clang-gnu-stage2.sh
  SAVE ARTIFACT /build/out/toolchain install

# An LLVM toolchain using GNU runtime libraries that runs on Linux x86-64.
llvm-gnu-x86-64-linux:
  FROM +image-package
  COPY +gcc-15-x86-64-linux/support /build/gcc-support/
  COPY +llvm-gnu-x86-64-linux-build/install /build/llvm/
  COPY scripts/llvm-assemble-toolchain.sh /build/
  RUN GNU_TARGET=x86_64-linux-gnu GCC_VERSION=15 /build/llvm-assemble-toolchain.sh
  SAVE ARTIFACT /build/llvm.tar.zst AS LOCAL build/llvm-gnu_only-x86_64-unknown-linux-gnu.tar.zst
  SAVE ARTIFACT /build/llvm install
